{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Projeto BlackOps","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o do projeto BlackOps...</p>"},{"location":"reference/","title":"Refer\u00eancia da Interface","text":""},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard","title":"<code>GitHubDashboard</code>","text":"Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>class GitHubDashboard:\n    def __init__(self, user_data):\n        self.user_data = user_data\n\n    def show_dashboard(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de funcionalidades no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        tabs = st.tabs([\n            \"\ud83d\udc64 Perfil\",\n            \"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\",\n            \"\ud83d\uddc3\ufe0f Lista Detalhada\",\n            \"\ud83d\udcca Regress\u00e3o - Info\",\n            \"\ud83d\udcc9 Regress\u00e3o - Gr\u00e1fico\",\n            \"\ud83d\udee1\ufe0f Relay e Firewall\"\n        ])\n\n        with tabs[0]:\n            self.exibir_perfil()\n\n        with tabs[1]:\n            self.exibir_repositorios_publicos()\n\n        with tabs[2]:\n            self.exibir_lista_repositorios()\n\n        with tabs[3]:\n            self.exibir_data_science()\n\n        with tabs[4]:\n            self.exibir_data_science_plot()\n\n        with tabs[5]:\n            self.exibir_relay_firewall()\n\n    def exibir_perfil(self) -&gt; None:\n        \"\"\"\n        Exibe o perfil do usu\u00e1rio do github.\n\n        Returns:\n            Exibir (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.title(\"\ud83d\udc64 GitHub Dashboard\")\n        col1, col2 = st.columns([1, 3])\n        with col1:\n            st.image(self.user_data.get(\"avatar_url\"), width=120)\n        with col2:\n            st.subheader(self.user_data.get(\"name\") or self.user_data.get(\"login\"))\n            st.caption(f\"[\ud83d\udd17 {self.user_data.get('login')}]({self.user_data.get('html_url')})\")\n            if self.user_data.get(\"location\"):\n                st.text(f\"\ud83d\udccd {self.user_data['location']}\")\n            if self.user_data.get(\"email\"):\n                st.text(f\"\ud83d\udce7 {self.user_data['email']}\")\n            if self.user_data.get(\"bio\"):\n                st.markdown(f\"&gt; _{self.user_data['bio']}_\")\n\n    def exibir_repositorios(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        aba1, aba2 = st.tabs([\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\", \"\ud83d\uddc3\ufe0f Lista Detalhada de Reposit\u00f3rios\"])\n        with aba1:\n            self.exibir_repositorios_publicos()\n        with aba2:\n            self.exibir_lista_repositorios()\n\n    def exibir_repositorios_publicos(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios publicos no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\")\n        repos_url = self.user_data.get(\"repos_url\")\n        if repos_url:\n            response = requests.get(repos_url)\n            if response.status_code == 200:\n                repos = response.json()\n                if isinstance(repos, list):\n                    for repo in repos[:100]:\n                        st.markdown(f\"\ud83d\udcd4\ufe0f [{repo['name']}]({repo['html_url']}) \u2014 \u2b50 {repo['stargazers_count']}\")\n                else:\n                    st.warning(\"\\u26a0\\ufe0f Dados de reposit\u00f3rios inv\u00e1lidos recebidos da API.\")\n            else:\n                st.error(f\"\u274c Erro ao acessar reposit\u00f3rios: {response.status_code}\")\n\n    def exibir_lista_repositorios(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios detalhados no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc3 Lista Detalhada de Reposit\u00f3rios\")\n        repos_url = self.user_data.get(\"repos_url\")\n        if repos_url:\n            try:\n                repos = requests.get(repos_url).json()\n                df_repos = pd.DataFrame([{\n                    \"Nome\": repo[\"name\"],\n                    \"Descri\u00e7\u00e3o\": repo.get(\"description\", \"\"),\n                    \"Estrelas\": repo[\"stargazers_count\"],\n                    \"Forks\": repo[\"forks_count\"],\n                    \"URL\": repo[\"html_url\"],\n                    \"Linguagem\": repo.get(\"language\", \"N/A\"),\n                    \"Atualizado em\": repo[\"updated_at\"]\n                } for repo in repos])\n                st.dataframe(df_repos)\n            except Exception as e:\n                st.error(f\"Erro ao carregar reposit\u00f3rios: {e}\")\n        else:\n            st.warning(\"URL de reposit\u00f3rios n\u00e3o encontrada.\")\n\n    def exibir_data_science(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de m\u00e9todos datascience no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        aba1, aba2, aba3 = st.tabs([\n            \"\ud83d\udcc8 Data Science: Regression Table - Info\",\n            \"\ud83d\udcc8 Data Science: Regression Table - Plot\",\n            \"\ud83d\udcca Data Science: S\u00e9ries Temporais\"\n        ])\n        with aba1:\n            self.exibir_data_science_resumo()\n        with aba2:\n            self.exibir_data_science_plot()\n        with aba3:\n            self.exibir_series_temporais()\n\n    def exibir_data_science_resumo(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Resumo): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Info\")\n        try:\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            df = pd.DataFrame({\n                \"linguagens\": [linguagem + i for i in range(-5, 5)],\n                \"repositorios\": [repos + i for i in range(-5, 5)]\n            })\n            X = df[\"linguagens\"]\n            y = df[\"repositorios\"]\n            X_const = sm.add_constant(X)\n            modelo = sm.OLS(y, X_const).fit()\n            st.write(\"**Resumo da Regress\u00e3o Linear com seus dados do GitHub:**\")\n            st.text(modelo.summary())\n        except Exception as e:\n            st.error(f\"Erro ao exibir regress\u00e3o: {e}\")\n\n    def exibir_data_science_plot(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Plot): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Plot\")\n        try:\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            df = pd.DataFrame({\n                \"linguagens\": [linguagem + i for i in range(-5, 5)],\n                \"repositorios\": [repos + i for i in range(-5, 5)]\n            })\n            fig, ax = plt.subplots()\n            sns.regplot(x=\"linguagens\", y=\"repositorios\", data=df, ax=ax)\n            ax.set_title(\"Regress\u00e3o Linear: Linguagens vs Reposit\u00f3rios (Baseada no seu GitHub)\")\n            st.pyplot(fig)\n        except Exception as e:\n            st.error(f\"Erro ao exibir gr\u00e1fico de regress\u00e3o: {e}\")\n\n    def exibir_series_temporais(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Temporais): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcca An\u00e1lise de S\u00e9ries Temporais com seus dados do GitHub\")\n        try:\n            # Simula evolu\u00e7\u00e3o de reposit\u00f3rios com base no tempo\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            datas = pd.date_range(end=pd.Timestamp.today(), periods=10)\n\n            df = pd.DataFrame({\n                \"data\": datas,\n                \"linguagens\": [linguagem + i for i in range(10)],\n                \"repositorios\": [repos + i + (i % 3 - 1) for i in range(10)]\n            }).set_index(\"data\")\n\n            # Gr\u00e1fico de linha simples\n            st.line_chart(df[[\"repositorios\"]])\n\n            # M\u00e9dia m\u00f3vel\n            df[\"media_movel\"] = df[\"repositorios\"].rolling(window=3).mean()\n            fig, ax = plt.subplots()\n            df[\"repositorios\"].plot(ax=ax, label=\"Reposit\u00f3rios\", marker=\"o\")\n            df[\"media_movel\"].plot(ax=ax, label=\"M\u00e9dia M\u00f3vel (3 dias)\", linestyle=\"--\")\n            ax.set_title(\"Reposit\u00f3rios GitHub - S\u00e9rie Temporal com M\u00e9dia M\u00f3vel\")\n            ax.legend()\n            st.pyplot(fig)\n\n        except Exception as e:\n            st.error(f\"Erro ao exibir s\u00e9ries temporais: {e}\")\n\n\n    def exibir_relay_firewall(self) -&gt; None:\n        \"\"\"\n        Exibe as informa\u00e7\u00f5es do relay.\n\n        Returns:\n            Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        log = []\n\n        st.subheader(\"\ud83d\ude80 Ciberseguran\u00e7a: Relay e Firewall\")\n        status = st.empty()\n        reiniciar = st.button(\"\ud83d\udca1 Reiniciar Rel\u00e9\")\n\n        porta_serial = self.detectar_porta_serial() or \"COM4\"\n        baud_rate = 9600\n\n        try:\n            if reiniciar:\n                st.write(\"Reiniciando rel\u00e9...\")\n                log = [\"\u2705 Comando enviado: RESTART\"]\n                self.enviar_comando(porta_serial, baud_rate, b\"RESTART\\n\", log)\n                status.success(\"Rel\u00e9 Reiniciado com sucesso! \u2705\")\n\n            st.info(f\"\ud83d\udd0c Iniciando comunica\u00e7\u00e3o serial na porta `{porta_serial}`...\")\n            with serial.Serial(porta_serial, baud_rate, timeout=2) as ser:\n                time.sleep(2)\n                ser.write(b\"FIREWALL\\n\")\n                log = [\"\u2705 Comando enviado: FIREWALL\"]\n                start = time.time()\n                raw_response = ser.readline()\n                latencia = time.time() - start\n\n            if log:\n                self.exibir_resultado(raw_response, latencia, log)\n\n        except serial.SerialException as se:\n            st.error(f\"Erro de conex\u00e3o serial: {se}\")\n        except Exception as e:\n            st.error(f\"Erro inesperado: {e}\")\n\n    def detectar_porta_serial(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.\n\n        Returns:\n            Show (Port): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        portas = list(serial.tools.list_ports.comports())\n        for p in portas:\n            if any(chave in p.description for chave in [\"USB\", \"CH340\", \"CP210\"]):\n                return p.device\n        return None\n\n    def enviar_comando(self, porta, baud_rate, comando, log):\n        \"\"\"\n        M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.\n\n        Returns:\n            Send (Command): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        try:\n            with serial.Serial(porta, baud_rate, timeout=1) as ser:\n                if isinstance(comando, str):\n                    comando = comando.encode()\n                ser.write(comando)\n                log.append(f\"\u2705 Comando enviado (interno): {comando.decode().strip()}\")\n        except serial.SerialException as e:\n            log.append(f\"\u274c Erro ao enviar comando para a porta serial: {str(e)}\")\n        except Exception as e:\n            log.append(f\"\u274c Erro inesperado: {str(e)}\")\n\n    def exibir_resultado(self, raw_response, latencia, log) -&gt; None:\n        \"\"\"\n        Exibe o resultado das informa\u00e7\u00f5es do relay.\n\n        Returns:\n            Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        response_str = self.decodificar_resposta(raw_response, log)\n        abas = st.tabs([\"\ud83d\udcf1 Resposta\", \"\ud83d\udce6 Bytes Recebidos\", \"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\", \"\ud83e\uddea An\u00e1lise XOR\"])\n\n        with abas[0]:\n            st.subheader(\"\ud83d\udcf1 Resposta do Dispositivo\")\n            if response_str:\n                st.success(f\"\ud83d\udcf1 Resposta do dispositivo: {response_str}\")\n            else:\n                st.warning(\"\u26a0\ufe0f Dados n\u00e3o textuais recebidos.\")\n                st.code(raw_response.hex(), language=\"text\")\n\n            st.text(f\"\u23f1\ufe0f Tempo de resposta: {latencia:.2f} segundos\")\n\n            if response_str and \"OK\" in response_str.upper():\n                st.success(\"\ud83d\udd0d Firewall validado e relay seguro.\")\n            elif response_str:\n                st.warning(f\"\u2757 Resposta inesperada: '{response_str}' \u2014 verifique o firmware.\")\n            else:\n                st.error(\"\u274c Nenhuma resposta v\u00e1lida foi interpretada.\")\n\n        with abas[1]:\n            st.code(\" \".join(f\"{b:02x}\" for b in raw_response), language=\"text\")\n            byte_table = pd.DataFrame({\n                \"Byte (Hex)\": [f\"{b:02x}\" for b in raw_response],\n                \"Byte (Dec)\": [str(b) for b in raw_response],\n                \"ASCII\": [chr(b) if 32 &lt;= b &lt;= 126 else \".\" for b in raw_response]\n            })\n            with st.expander(\"\ud83d\udce6 Bytes Recebidos\"):\n                st.dataframe(byte_table)\n\n        with abas[2]:\n            st.subheader(\"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\")\n            st.code(\"\\n\".join(log), language=\"text\")\n\n        with abas[3]:\n            self.exibir_analise_xor(raw_response)\n\n    def decodificar_resposta(self, raw, log) -&gt; None:\n        \"\"\"\n        M\u00e9todo de descriptografia.\n\n        Returns:\n            Show (Descript): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        try:\n            response = raw.decode(\"utf-8\")\n            log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: UTF-8\")\n            return response\n        except UnicodeDecodeError:\n            try:\n                response = raw.decode(\"latin1\")\n                log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Latin-1\")\n                return response\n            except Exception:\n                try:\n                    base64_str = raw.decode(\"utf-8\", errors=\"ignore\")\n                    decoded = base64.b64decode(base64_str).decode(\"utf-8\", errors=\"replace\")\n                    log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Base64 (fallback)\")\n                    return decoded\n                except Exception as e:\n                    log.append(f\"\ud83d\udea8 Falha na decodifica\u00e7\u00e3o base64: {e}\")\n        return None\n\n    def exibir_analise_xor(self, raw_response) -&gt; None:\n        \"\"\"\n        Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.\n\n        Returns:\n            Show (Xor): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83e\uddea An\u00e1lise XOR Brute Force - Tabela Redimensional\")\n        palavras_chave = [\"OK\", \"FIREWALL\", \"ACCESS\", \"RESTART\", \"DENIED\", \"GRANTED\", \"SECURE\"]\n        tabela_xor = []\n\n        for key in range(1, 256):\n            xor_result = [b ^ key for b in raw_response]\n            decoded = ''.join(chr(b) if 32 &lt;= b &lt;= 126 else '.' for b in xor_result)\n\n            palavras_detectadas = [p for p in palavras_chave if p.upper() in decoded.upper()]\n            printable_chars = sum(1 for c in decoded if 32 &lt;= ord(c) &lt;= 126)\n            printable_ratio = printable_chars / len(decoded)\n\n            if printable_ratio &gt; 0.8 and palavras_detectadas:\n                tabela_xor.append({\n                    \"Key\": key,\n                    \"Printable Ratio\": printable_ratio,\n                    \"Qtd Palavras-chave\": len(palavras_detectadas),\n                    \"Palavra-chave Detectada\": \", \".join(palavras_detectadas),\n                    \"Texto Decodificado\": decoded\n                })\n\n        if tabela_xor:\n            df_xor = pd.DataFrame(tabela_xor).sort_values(by=[\"Qtd Palavras-chave\", \"Printable Ratio\"], ascending=False)\n\n            melhor_linha = df_xor.iloc[0]\n            st.markdown(\"### \ud83d\udd0d Insights\")\n            st.write(f\"**Chave Encontrada:** `{melhor_linha['Key']}`\")\n            st.write(f\"**Texto Decodificado:** `{melhor_linha['Texto Decodificado']}`\")\n            st.write(f\"**Palavras-chave Detectadas:** `{melhor_linha['Palavra-chave Detectada']}`\")\n            st.write(f\"**Printable Ratio:** `{melhor_linha['Printable Ratio']:.2f}`\")\n            st.write(f\"**Qtd Palavras-chave:** `{melhor_linha['Qtd Palavras-chave']}`\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.decodificar_resposta","title":"<code>decodificar_resposta(raw, log)</code>","text":"<p>M\u00e9todo de descriptografia.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Descript</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def decodificar_resposta(self, raw, log) -&gt; None:\n    \"\"\"\n    M\u00e9todo de descriptografia.\n\n    Returns:\n        Show (Descript): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    try:\n        response = raw.decode(\"utf-8\")\n        log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: UTF-8\")\n        return response\n    except UnicodeDecodeError:\n        try:\n            response = raw.decode(\"latin1\")\n            log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Latin-1\")\n            return response\n        except Exception:\n            try:\n                base64_str = raw.decode(\"utf-8\", errors=\"ignore\")\n                decoded = base64.b64decode(base64_str).decode(\"utf-8\", errors=\"replace\")\n                log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Base64 (fallback)\")\n                return decoded\n            except Exception as e:\n                log.append(f\"\ud83d\udea8 Falha na decodifica\u00e7\u00e3o base64: {e}\")\n    return None\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.detectar_porta_serial","title":"<code>detectar_porta_serial()</code>","text":"<p>M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Port</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def detectar_porta_serial(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.\n\n    Returns:\n        Show (Port): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    portas = list(serial.tools.list_ports.comports())\n    for p in portas:\n        if any(chave in p.description for chave in [\"USB\", \"CH340\", \"CP210\"]):\n            return p.device\n    return None\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.enviar_comando","title":"<code>enviar_comando(porta, baud_rate, comando, log)</code>","text":"<p>M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.</p> <p>Returns:</p> Name Type Description <code>Send</code> <code>Command</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def enviar_comando(self, porta, baud_rate, comando, log):\n    \"\"\"\n    M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.\n\n    Returns:\n        Send (Command): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    try:\n        with serial.Serial(porta, baud_rate, timeout=1) as ser:\n            if isinstance(comando, str):\n                comando = comando.encode()\n            ser.write(comando)\n            log.append(f\"\u2705 Comando enviado (interno): {comando.decode().strip()}\")\n    except serial.SerialException as e:\n        log.append(f\"\u274c Erro ao enviar comando para a porta serial: {str(e)}\")\n    except Exception as e:\n        log.append(f\"\u274c Erro inesperado: {str(e)}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_analise_xor","title":"<code>exibir_analise_xor(raw_response)</code>","text":"<p>Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Xor</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_analise_xor(self, raw_response) -&gt; None:\n    \"\"\"\n    Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.\n\n    Returns:\n        Show (Xor): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83e\uddea An\u00e1lise XOR Brute Force - Tabela Redimensional\")\n    palavras_chave = [\"OK\", \"FIREWALL\", \"ACCESS\", \"RESTART\", \"DENIED\", \"GRANTED\", \"SECURE\"]\n    tabela_xor = []\n\n    for key in range(1, 256):\n        xor_result = [b ^ key for b in raw_response]\n        decoded = ''.join(chr(b) if 32 &lt;= b &lt;= 126 else '.' for b in xor_result)\n\n        palavras_detectadas = [p for p in palavras_chave if p.upper() in decoded.upper()]\n        printable_chars = sum(1 for c in decoded if 32 &lt;= ord(c) &lt;= 126)\n        printable_ratio = printable_chars / len(decoded)\n\n        if printable_ratio &gt; 0.8 and palavras_detectadas:\n            tabela_xor.append({\n                \"Key\": key,\n                \"Printable Ratio\": printable_ratio,\n                \"Qtd Palavras-chave\": len(palavras_detectadas),\n                \"Palavra-chave Detectada\": \", \".join(palavras_detectadas),\n                \"Texto Decodificado\": decoded\n            })\n\n    if tabela_xor:\n        df_xor = pd.DataFrame(tabela_xor).sort_values(by=[\"Qtd Palavras-chave\", \"Printable Ratio\"], ascending=False)\n\n        melhor_linha = df_xor.iloc[0]\n        st.markdown(\"### \ud83d\udd0d Insights\")\n        st.write(f\"**Chave Encontrada:** `{melhor_linha['Key']}`\")\n        st.write(f\"**Texto Decodificado:** `{melhor_linha['Texto Decodificado']}`\")\n        st.write(f\"**Palavras-chave Detectadas:** `{melhor_linha['Palavra-chave Detectada']}`\")\n        st.write(f\"**Printable Ratio:** `{melhor_linha['Printable Ratio']:.2f}`\")\n        st.write(f\"**Qtd Palavras-chave:** `{melhor_linha['Qtd Palavras-chave']}`\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science","title":"<code>exibir_data_science()</code>","text":"<p>Exibe a lista de m\u00e9todos datascience no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de m\u00e9todos datascience no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    aba1, aba2, aba3 = st.tabs([\n        \"\ud83d\udcc8 Data Science: Regression Table - Info\",\n        \"\ud83d\udcc8 Data Science: Regression Table - Plot\",\n        \"\ud83d\udcca Data Science: S\u00e9ries Temporais\"\n    ])\n    with aba1:\n        self.exibir_data_science_resumo()\n    with aba2:\n        self.exibir_data_science_plot()\n    with aba3:\n        self.exibir_series_temporais()\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science_plot","title":"<code>exibir_data_science_plot()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Plot</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science_plot(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Plot): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Plot\")\n    try:\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        df = pd.DataFrame({\n            \"linguagens\": [linguagem + i for i in range(-5, 5)],\n            \"repositorios\": [repos + i for i in range(-5, 5)]\n        })\n        fig, ax = plt.subplots()\n        sns.regplot(x=\"linguagens\", y=\"repositorios\", data=df, ax=ax)\n        ax.set_title(\"Regress\u00e3o Linear: Linguagens vs Reposit\u00f3rios (Baseada no seu GitHub)\")\n        st.pyplot(fig)\n    except Exception as e:\n        st.error(f\"Erro ao exibir gr\u00e1fico de regress\u00e3o: {e}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science_resumo","title":"<code>exibir_data_science_resumo()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Resumo</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science_resumo(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Resumo): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Info\")\n    try:\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        df = pd.DataFrame({\n            \"linguagens\": [linguagem + i for i in range(-5, 5)],\n            \"repositorios\": [repos + i for i in range(-5, 5)]\n        })\n        X = df[\"linguagens\"]\n        y = df[\"repositorios\"]\n        X_const = sm.add_constant(X)\n        modelo = sm.OLS(y, X_const).fit()\n        st.write(\"**Resumo da Regress\u00e3o Linear com seus dados do GitHub:**\")\n        st.text(modelo.summary())\n    except Exception as e:\n        st.error(f\"Erro ao exibir regress\u00e3o: {e}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_lista_repositorios","title":"<code>exibir_lista_repositorios()</code>","text":"<p>Exibe a lista de reposit\u00f3rios detalhados no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_lista_repositorios(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios detalhados no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc3 Lista Detalhada de Reposit\u00f3rios\")\n    repos_url = self.user_data.get(\"repos_url\")\n    if repos_url:\n        try:\n            repos = requests.get(repos_url).json()\n            df_repos = pd.DataFrame([{\n                \"Nome\": repo[\"name\"],\n                \"Descri\u00e7\u00e3o\": repo.get(\"description\", \"\"),\n                \"Estrelas\": repo[\"stargazers_count\"],\n                \"Forks\": repo[\"forks_count\"],\n                \"URL\": repo[\"html_url\"],\n                \"Linguagem\": repo.get(\"language\", \"N/A\"),\n                \"Atualizado em\": repo[\"updated_at\"]\n            } for repo in repos])\n            st.dataframe(df_repos)\n        except Exception as e:\n            st.error(f\"Erro ao carregar reposit\u00f3rios: {e}\")\n    else:\n        st.warning(\"URL de reposit\u00f3rios n\u00e3o encontrada.\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_perfil","title":"<code>exibir_perfil()</code>","text":"<p>Exibe o perfil do usu\u00e1rio do github.</p> <p>Returns:</p> Name Type Description <code>Exibir</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_perfil(self) -&gt; None:\n    \"\"\"\n    Exibe o perfil do usu\u00e1rio do github.\n\n    Returns:\n        Exibir (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.title(\"\ud83d\udc64 GitHub Dashboard\")\n    col1, col2 = st.columns([1, 3])\n    with col1:\n        st.image(self.user_data.get(\"avatar_url\"), width=120)\n    with col2:\n        st.subheader(self.user_data.get(\"name\") or self.user_data.get(\"login\"))\n        st.caption(f\"[\ud83d\udd17 {self.user_data.get('login')}]({self.user_data.get('html_url')})\")\n        if self.user_data.get(\"location\"):\n            st.text(f\"\ud83d\udccd {self.user_data['location']}\")\n        if self.user_data.get(\"email\"):\n            st.text(f\"\ud83d\udce7 {self.user_data['email']}\")\n        if self.user_data.get(\"bio\"):\n            st.markdown(f\"&gt; _{self.user_data['bio']}_\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_relay_firewall","title":"<code>exibir_relay_firewall()</code>","text":"<p>Exibe as informa\u00e7\u00f5es do relay.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Relay</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_relay_firewall(self) -&gt; None:\n    \"\"\"\n    Exibe as informa\u00e7\u00f5es do relay.\n\n    Returns:\n        Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    log = []\n\n    st.subheader(\"\ud83d\ude80 Ciberseguran\u00e7a: Relay e Firewall\")\n    status = st.empty()\n    reiniciar = st.button(\"\ud83d\udca1 Reiniciar Rel\u00e9\")\n\n    porta_serial = self.detectar_porta_serial() or \"COM4\"\n    baud_rate = 9600\n\n    try:\n        if reiniciar:\n            st.write(\"Reiniciando rel\u00e9...\")\n            log = [\"\u2705 Comando enviado: RESTART\"]\n            self.enviar_comando(porta_serial, baud_rate, b\"RESTART\\n\", log)\n            status.success(\"Rel\u00e9 Reiniciado com sucesso! \u2705\")\n\n        st.info(f\"\ud83d\udd0c Iniciando comunica\u00e7\u00e3o serial na porta `{porta_serial}`...\")\n        with serial.Serial(porta_serial, baud_rate, timeout=2) as ser:\n            time.sleep(2)\n            ser.write(b\"FIREWALL\\n\")\n            log = [\"\u2705 Comando enviado: FIREWALL\"]\n            start = time.time()\n            raw_response = ser.readline()\n            latencia = time.time() - start\n\n        if log:\n            self.exibir_resultado(raw_response, latencia, log)\n\n    except serial.SerialException as se:\n        st.error(f\"Erro de conex\u00e3o serial: {se}\")\n    except Exception as e:\n        st.error(f\"Erro inesperado: {e}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_repositorios","title":"<code>exibir_repositorios()</code>","text":"<p>Exibe a lista de reposit\u00f3rios no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_repositorios(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    aba1, aba2 = st.tabs([\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\", \"\ud83d\uddc3\ufe0f Lista Detalhada de Reposit\u00f3rios\"])\n    with aba1:\n        self.exibir_repositorios_publicos()\n    with aba2:\n        self.exibir_lista_repositorios()\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_repositorios_publicos","title":"<code>exibir_repositorios_publicos()</code>","text":"<p>Exibe a lista de reposit\u00f3rios publicos no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_repositorios_publicos(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios publicos no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\")\n    repos_url = self.user_data.get(\"repos_url\")\n    if repos_url:\n        response = requests.get(repos_url)\n        if response.status_code == 200:\n            repos = response.json()\n            if isinstance(repos, list):\n                for repo in repos[:100]:\n                    st.markdown(f\"\ud83d\udcd4\ufe0f [{repo['name']}]({repo['html_url']}) \u2014 \u2b50 {repo['stargazers_count']}\")\n            else:\n                st.warning(\"\\u26a0\\ufe0f Dados de reposit\u00f3rios inv\u00e1lidos recebidos da API.\")\n        else:\n            st.error(f\"\u274c Erro ao acessar reposit\u00f3rios: {response.status_code}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_resultado","title":"<code>exibir_resultado(raw_response, latencia, log)</code>","text":"<p>Exibe o resultado das informa\u00e7\u00f5es do relay.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Relay</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_resultado(self, raw_response, latencia, log) -&gt; None:\n    \"\"\"\n    Exibe o resultado das informa\u00e7\u00f5es do relay.\n\n    Returns:\n        Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    response_str = self.decodificar_resposta(raw_response, log)\n    abas = st.tabs([\"\ud83d\udcf1 Resposta\", \"\ud83d\udce6 Bytes Recebidos\", \"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\", \"\ud83e\uddea An\u00e1lise XOR\"])\n\n    with abas[0]:\n        st.subheader(\"\ud83d\udcf1 Resposta do Dispositivo\")\n        if response_str:\n            st.success(f\"\ud83d\udcf1 Resposta do dispositivo: {response_str}\")\n        else:\n            st.warning(\"\u26a0\ufe0f Dados n\u00e3o textuais recebidos.\")\n            st.code(raw_response.hex(), language=\"text\")\n\n        st.text(f\"\u23f1\ufe0f Tempo de resposta: {latencia:.2f} segundos\")\n\n        if response_str and \"OK\" in response_str.upper():\n            st.success(\"\ud83d\udd0d Firewall validado e relay seguro.\")\n        elif response_str:\n            st.warning(f\"\u2757 Resposta inesperada: '{response_str}' \u2014 verifique o firmware.\")\n        else:\n            st.error(\"\u274c Nenhuma resposta v\u00e1lida foi interpretada.\")\n\n    with abas[1]:\n        st.code(\" \".join(f\"{b:02x}\" for b in raw_response), language=\"text\")\n        byte_table = pd.DataFrame({\n            \"Byte (Hex)\": [f\"{b:02x}\" for b in raw_response],\n            \"Byte (Dec)\": [str(b) for b in raw_response],\n            \"ASCII\": [chr(b) if 32 &lt;= b &lt;= 126 else \".\" for b in raw_response]\n        })\n        with st.expander(\"\ud83d\udce6 Bytes Recebidos\"):\n            st.dataframe(byte_table)\n\n    with abas[2]:\n        st.subheader(\"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\")\n        st.code(\"\\n\".join(log), language=\"text\")\n\n    with abas[3]:\n        self.exibir_analise_xor(raw_response)\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.exibir_series_temporais","title":"<code>exibir_series_temporais()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Temporais</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_series_temporais(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Temporais): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcca An\u00e1lise de S\u00e9ries Temporais com seus dados do GitHub\")\n    try:\n        # Simula evolu\u00e7\u00e3o de reposit\u00f3rios com base no tempo\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        datas = pd.date_range(end=pd.Timestamp.today(), periods=10)\n\n        df = pd.DataFrame({\n            \"data\": datas,\n            \"linguagens\": [linguagem + i for i in range(10)],\n            \"repositorios\": [repos + i + (i % 3 - 1) for i in range(10)]\n        }).set_index(\"data\")\n\n        # Gr\u00e1fico de linha simples\n        st.line_chart(df[[\"repositorios\"]])\n\n        # M\u00e9dia m\u00f3vel\n        df[\"media_movel\"] = df[\"repositorios\"].rolling(window=3).mean()\n        fig, ax = plt.subplots()\n        df[\"repositorios\"].plot(ax=ax, label=\"Reposit\u00f3rios\", marker=\"o\")\n        df[\"media_movel\"].plot(ax=ax, label=\"M\u00e9dia M\u00f3vel (3 dias)\", linestyle=\"--\")\n        ax.set_title(\"Reposit\u00f3rios GitHub - S\u00e9rie Temporal com M\u00e9dia M\u00f3vel\")\n        ax.legend()\n        st.pyplot(fig)\n\n    except Exception as e:\n        st.error(f\"Erro ao exibir s\u00e9ries temporais: {e}\")\n</code></pre>"},{"location":"reference/#dashboard.github_dashboard.GitHubDashboard.show_dashboard","title":"<code>show_dashboard()</code>","text":"<p>Exibe a lista de funcionalidades no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def show_dashboard(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de funcionalidades no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    tabs = st.tabs([\n        \"\ud83d\udc64 Perfil\",\n        \"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\",\n        \"\ud83d\uddc3\ufe0f Lista Detalhada\",\n        \"\ud83d\udcca Regress\u00e3o - Info\",\n        \"\ud83d\udcc9 Regress\u00e3o - Gr\u00e1fico\",\n        \"\ud83d\udee1\ufe0f Relay e Firewall\"\n    ])\n\n    with tabs[0]:\n        self.exibir_perfil()\n\n    with tabs[1]:\n        self.exibir_repositorios_publicos()\n\n    with tabs[2]:\n        self.exibir_lista_repositorios()\n\n    with tabs[3]:\n        self.exibir_data_science()\n\n    with tabs[4]:\n        self.exibir_data_science_plot()\n\n    with tabs[5]:\n        self.exibir_relay_firewall()\n</code></pre>"},{"location":"reference/#blackops.ui.streamlit_interface.executar_funcao","title":"<code>executar_funcao(funcao)</code>","text":"<p>Executa a fun\u00e7\u00e3o associada a um bot\u00e3o da interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Funcao</code> <code>Optional[str]</code> <p>Nome da fun\u00e7\u00e3o a ser executada.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def executar_funcao(funcao: Optional[str]) -&gt; None:\n    \"\"\"\n    Executa a fun\u00e7\u00e3o associada a um bot\u00e3o da interface Streamlit.\n\n    Returns:\n        Funcao (Optional[str]): Nome da fun\u00e7\u00e3o a ser executada.\n    \"\"\"\n    if funcao == 'activate_relay':\n        activate_relay()\n        st.success(\"Relay ativado com sucesso!\")\n    elif funcao == 'scan_port':\n        portas = scan_ports()\n        st.code(f\"Portas abertas: {portas}\")\n    elif funcao == 'verify_firewall':\n        regras = check_firewall_rules()\n        st.code(\"\\n\".join(regras))\n    elif funcao == 'voice_command':\n        resultado = activate_voice_control()\n        st.success(resultado)\n        st.info(resultado)\n    elif funcao == 'stream_camera':\n        stream_camera()\n</code></pre>"},{"location":"reference/#blackops.ui.streamlit_interface.load_config","title":"<code>load_config()</code>","text":"<p>Carrega o arquivo de configura\u00e7\u00e3o YAML.</p> <p>Returns:</p> Name Type Description <code>Load</code> <code>Dict[str, Any]</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def load_config() -&gt; Dict[str, Any]:\n    \"\"\"\n    Carrega o arquivo de configura\u00e7\u00e3o YAML.\n\n    Returns:\n        Load: Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'settings.yaml')\n    with open(config_path, 'r') as file:\n        return yaml.safe_load(file)\n</code></pre>"},{"location":"reference/#blackops.ui.streamlit_interface.show_comandos_disponiveis","title":"<code>show_comandos_disponiveis()</code>","text":"<p>Exibe a lista de comandos de voz dispon\u00edveis na interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def show_comandos_disponiveis() -&gt; None:\n    \"\"\"\n    Exibe a lista de comandos de voz dispon\u00edveis na interface Streamlit.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.markdown(\"---\")\n    st.markdown(\"### \ud83c\udf99\ufe0f Comandos de Voz Dispon\u00edveis\")\n    comandos = [\n        \"Qual o \u00faltimo commit do projeto?\",\n        \"Resuma o reposit\u00f3rio OpenAI Whisper.\",\n        \"Quantas issues est\u00e3o abertas?\",\n        \"Quais s\u00e3o as pull requests?\",\n        \"Em qual linguagem esse reposit\u00f3rio est\u00e1 programado?\"\n    ]\n    for comando in comandos:\n        st.markdown(f\"- `{comando}`\")\n</code></pre>"},{"location":"reference/#blackops.ui.streamlit_interface.show_project_info","title":"<code>show_project_info()</code>","text":"<p>Exibe informa\u00e7\u00f5es do reposit\u00f3rio GitHub, comandos e a\u00e7\u00f5es interativas na interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Project</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def show_project_info() -&gt; None:\n    \"\"\"\n    Exibe informa\u00e7\u00f5es do reposit\u00f3rio GitHub, comandos e a\u00e7\u00f5es interativas na interface Streamlit.\n\n    Returns:\n        Project (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n\n    col_status, col_comandos = st.columns(2)\n\n    config = load_config()\n    st_autorefresh(interval=60000, key=\"github_auto_refresh\")\n\n    with col_status:\n        st.markdown(\"---\")\n        st.header(\"\ud83d\udce1 Status do Reposit\u00f3rio GitHub\")\n\n        token = os.getenv(\"8928341d3b422e184b621364a45885f6a2baa804\")\n        repo_name = \"openai/whisper\"\n\n        repo_info = get_repo_info(repo_name, token)\n\n        if \"error\" in repo_info:\n            st.error(f\"Erro ao buscar dados do GitHub: {repo_info['error']}\")\n        else:\n            st.markdown(f\"**\ud83d\udd17 Reposit\u00f3rio:** `{repo_info['name']}`\")\n            st.markdown(f\"**\ud83d\udcdd Descri\u00e7\u00e3o:** {repo_info['description']}`\")\n            st.markdown(f\"**\ud83d\udce6 Linguagem Principal:** `{repo_info['language']}`\")\n            st.markdown(f\"**\u2b50 Estrelas:** `{repo_info['stars']}`\")\n            st.markdown(f\"**\ud83d\udc1e Issues Abertas:** `{repo_info['open_issues']}`\")\n            st.markdown(f\"**\ud83d\udd52 \u00daltimo Commit:** `{repo_info['last_commit']}`\")\n\n    with col_comandos:\n        show_comandos_disponiveis()\n\n    st.markdown(\"---\")\n    st.header(\"\u2699\ufe0f Comandos de Controle\")\n\n    col1, col2, col3, col4, col5 = st.columns(5)\n    funcao: Optional[str] = None\n\n    with col1:\n        if st.button(\"Ativar Relay \ud83d\udd0c\"):\n            funcao = 'activate_relay'\n    with col2:\n        if st.button(\"Scan de Portas \ud83c\udf10\"):\n            funcao = 'scan_port'\n    with col3:\n        if st.button(\"Verificar Firewall \ud83d\udd25\"):\n            funcao = 'verify_firewall'\n    with col4:\n        if st.button(\"Comando de Voz \ud83c\udf99\ufe0f\"):\n            funcao = 'voice_command'\n    with col5:\n        if st.button(\"\ud83d\udce1 Iniciar Live da C\u00e2mera\"):\n            funcao = 'stream_camera'\n\n    executar_funcao(funcao)\n\n    st.markdown(\"---\")\n    st.markdown(\"\u2705 M\u00f3dulos Ativos:\")\n    st.markdown(\"- \ud83d\udd0c Controle de Relay (GPIO)\")\n    st.markdown(\"- \ud83c\udf10 Verificador de Firewall e Portas\")\n    st.markdown(\"- \ud83c\udf99\ufe0f Reconhecimento de voz\")\n    st.markdown(\"- \ud83d\udcf7 OCR e Transmiss\u00e3o de v\u00eddeo\")\n    st.markdown(\"- \ud83e\udde0 M\u00f3dulos de IA e F\u00edsica\")\n    st.markdown(\"- \ud83d\udcca Interface Streamlit\")\n\n    st.success(\"Sistema pronto para opera\u00e7\u00e3o t\u00e1tica.\")\n</code></pre>"},{"location":"ui/","title":"Interface Streamlit","text":"<p>Veja a interface de controle t\u00e1tico integrada ao GitHub, OCR e IoT.</p> <p>!!! tip \"Veja tamb\u00e9m:\"     - Refer\u00eancia do m\u00f3dulo blackops_interface     - Refer\u00eancia do m\u00f3dulo app_interface</p>"},{"location":"modules/app_interface/","title":"<code>dashboard.github_dashboard</code>","text":""},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard","title":"<code>GitHubDashboard</code>","text":"Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>class GitHubDashboard:\n    def __init__(self, user_data):\n        self.user_data = user_data\n\n    def show_dashboard(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de funcionalidades no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        tabs = st.tabs([\n            \"\ud83d\udc64 Perfil\",\n            \"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\",\n            \"\ud83d\uddc3\ufe0f Lista Detalhada\",\n            \"\ud83d\udcca Regress\u00e3o - Info\",\n            \"\ud83d\udcc9 Regress\u00e3o - Gr\u00e1fico\",\n            \"\ud83d\udee1\ufe0f Relay e Firewall\"\n        ])\n\n        with tabs[0]:\n            self.exibir_perfil()\n\n        with tabs[1]:\n            self.exibir_repositorios_publicos()\n\n        with tabs[2]:\n            self.exibir_lista_repositorios()\n\n        with tabs[3]:\n            self.exibir_data_science()\n\n        with tabs[4]:\n            self.exibir_data_science_plot()\n\n        with tabs[5]:\n            self.exibir_relay_firewall()\n\n    def exibir_perfil(self) -&gt; None:\n        \"\"\"\n        Exibe o perfil do usu\u00e1rio do github.\n\n        Returns:\n            Exibir (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.title(\"\ud83d\udc64 GitHub Dashboard\")\n        col1, col2 = st.columns([1, 3])\n        with col1:\n            st.image(self.user_data.get(\"avatar_url\"), width=120)\n        with col2:\n            st.subheader(self.user_data.get(\"name\") or self.user_data.get(\"login\"))\n            st.caption(f\"[\ud83d\udd17 {self.user_data.get('login')}]({self.user_data.get('html_url')})\")\n            if self.user_data.get(\"location\"):\n                st.text(f\"\ud83d\udccd {self.user_data['location']}\")\n            if self.user_data.get(\"email\"):\n                st.text(f\"\ud83d\udce7 {self.user_data['email']}\")\n            if self.user_data.get(\"bio\"):\n                st.markdown(f\"&gt; _{self.user_data['bio']}_\")\n\n    def exibir_repositorios(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        aba1, aba2 = st.tabs([\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\", \"\ud83d\uddc3\ufe0f Lista Detalhada de Reposit\u00f3rios\"])\n        with aba1:\n            self.exibir_repositorios_publicos()\n        with aba2:\n            self.exibir_lista_repositorios()\n\n    def exibir_repositorios_publicos(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios publicos no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\")\n        repos_url = self.user_data.get(\"repos_url\")\n        if repos_url:\n            response = requests.get(repos_url)\n            if response.status_code == 200:\n                repos = response.json()\n                if isinstance(repos, list):\n                    for repo in repos[:100]:\n                        st.markdown(f\"\ud83d\udcd4\ufe0f [{repo['name']}]({repo['html_url']}) \u2014 \u2b50 {repo['stargazers_count']}\")\n                else:\n                    st.warning(\"\\u26a0\\ufe0f Dados de reposit\u00f3rios inv\u00e1lidos recebidos da API.\")\n            else:\n                st.error(f\"\u274c Erro ao acessar reposit\u00f3rios: {response.status_code}\")\n\n    def exibir_lista_repositorios(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de reposit\u00f3rios detalhados no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc3 Lista Detalhada de Reposit\u00f3rios\")\n        repos_url = self.user_data.get(\"repos_url\")\n        if repos_url:\n            try:\n                repos = requests.get(repos_url).json()\n                df_repos = pd.DataFrame([{\n                    \"Nome\": repo[\"name\"],\n                    \"Descri\u00e7\u00e3o\": repo.get(\"description\", \"\"),\n                    \"Estrelas\": repo[\"stargazers_count\"],\n                    \"Forks\": repo[\"forks_count\"],\n                    \"URL\": repo[\"html_url\"],\n                    \"Linguagem\": repo.get(\"language\", \"N/A\"),\n                    \"Atualizado em\": repo[\"updated_at\"]\n                } for repo in repos])\n                st.dataframe(df_repos)\n            except Exception as e:\n                st.error(f\"Erro ao carregar reposit\u00f3rios: {e}\")\n        else:\n            st.warning(\"URL de reposit\u00f3rios n\u00e3o encontrada.\")\n\n    def exibir_data_science(self) -&gt; None:\n        \"\"\"\n        Exibe a lista de m\u00e9todos datascience no aplicative.\n\n        Returns:\n            Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        aba1, aba2, aba3 = st.tabs([\n            \"\ud83d\udcc8 Data Science: Regression Table - Info\",\n            \"\ud83d\udcc8 Data Science: Regression Table - Plot\",\n            \"\ud83d\udcca Data Science: S\u00e9ries Temporais\"\n        ])\n        with aba1:\n            self.exibir_data_science_resumo()\n        with aba2:\n            self.exibir_data_science_plot()\n        with aba3:\n            self.exibir_series_temporais()\n\n    def exibir_data_science_resumo(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Resumo): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Info\")\n        try:\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            df = pd.DataFrame({\n                \"linguagens\": [linguagem + i for i in range(-5, 5)],\n                \"repositorios\": [repos + i for i in range(-5, 5)]\n            })\n            X = df[\"linguagens\"]\n            y = df[\"repositorios\"]\n            X_const = sm.add_constant(X)\n            modelo = sm.OLS(y, X_const).fit()\n            st.write(\"**Resumo da Regress\u00e3o Linear com seus dados do GitHub:**\")\n            st.text(modelo.summary())\n        except Exception as e:\n            st.error(f\"Erro ao exibir regress\u00e3o: {e}\")\n\n    def exibir_data_science_plot(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Plot): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Plot\")\n        try:\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            df = pd.DataFrame({\n                \"linguagens\": [linguagem + i for i in range(-5, 5)],\n                \"repositorios\": [repos + i for i in range(-5, 5)]\n            })\n            fig, ax = plt.subplots()\n            sns.regplot(x=\"linguagens\", y=\"repositorios\", data=df, ax=ax)\n            ax.set_title(\"Regress\u00e3o Linear: Linguagens vs Reposit\u00f3rios (Baseada no seu GitHub)\")\n            st.pyplot(fig)\n        except Exception as e:\n            st.error(f\"Erro ao exibir gr\u00e1fico de regress\u00e3o: {e}\")\n\n    def exibir_series_temporais(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo DataScience.\n\n        Returns:\n            Show (Temporais): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83d\udcca An\u00e1lise de S\u00e9ries Temporais com seus dados do GitHub\")\n        try:\n            # Simula evolu\u00e7\u00e3o de reposit\u00f3rios com base no tempo\n            linguagem = self.user_data.get(\"language\", 0)\n            repos = self.user_data.get(\"public_repos\", 0)\n            datas = pd.date_range(end=pd.Timestamp.today(), periods=10)\n\n            df = pd.DataFrame({\n                \"data\": datas,\n                \"linguagens\": [linguagem + i for i in range(10)],\n                \"repositorios\": [repos + i + (i % 3 - 1) for i in range(10)]\n            }).set_index(\"data\")\n\n            # Gr\u00e1fico de linha simples\n            st.line_chart(df[[\"repositorios\"]])\n\n            # M\u00e9dia m\u00f3vel\n            df[\"media_movel\"] = df[\"repositorios\"].rolling(window=3).mean()\n            fig, ax = plt.subplots()\n            df[\"repositorios\"].plot(ax=ax, label=\"Reposit\u00f3rios\", marker=\"o\")\n            df[\"media_movel\"].plot(ax=ax, label=\"M\u00e9dia M\u00f3vel (3 dias)\", linestyle=\"--\")\n            ax.set_title(\"Reposit\u00f3rios GitHub - S\u00e9rie Temporal com M\u00e9dia M\u00f3vel\")\n            ax.legend()\n            st.pyplot(fig)\n\n        except Exception as e:\n            st.error(f\"Erro ao exibir s\u00e9ries temporais: {e}\")\n\n\n    def exibir_relay_firewall(self) -&gt; None:\n        \"\"\"\n        Exibe as informa\u00e7\u00f5es do relay.\n\n        Returns:\n            Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        log = []\n\n        st.subheader(\"\ud83d\ude80 Ciberseguran\u00e7a: Relay e Firewall\")\n        status = st.empty()\n        reiniciar = st.button(\"\ud83d\udca1 Reiniciar Rel\u00e9\")\n\n        porta_serial = self.detectar_porta_serial() or \"COM4\"\n        baud_rate = 9600\n\n        try:\n            if reiniciar:\n                st.write(\"Reiniciando rel\u00e9...\")\n                log = [\"\u2705 Comando enviado: RESTART\"]\n                self.enviar_comando(porta_serial, baud_rate, b\"RESTART\\n\", log)\n                status.success(\"Rel\u00e9 Reiniciado com sucesso! \u2705\")\n\n            st.info(f\"\ud83d\udd0c Iniciando comunica\u00e7\u00e3o serial na porta `{porta_serial}`...\")\n            with serial.Serial(porta_serial, baud_rate, timeout=2) as ser:\n                time.sleep(2)\n                ser.write(b\"FIREWALL\\n\")\n                log = [\"\u2705 Comando enviado: FIREWALL\"]\n                start = time.time()\n                raw_response = ser.readline()\n                latencia = time.time() - start\n\n            if log:\n                self.exibir_resultado(raw_response, latencia, log)\n\n        except serial.SerialException as se:\n            st.error(f\"Erro de conex\u00e3o serial: {se}\")\n        except Exception as e:\n            st.error(f\"Erro inesperado: {e}\")\n\n    def detectar_porta_serial(self) -&gt; None:\n        \"\"\"\n        M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.\n\n        Returns:\n            Show (Port): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        portas = list(serial.tools.list_ports.comports())\n        for p in portas:\n            if any(chave in p.description for chave in [\"USB\", \"CH340\", \"CP210\"]):\n                return p.device\n        return None\n\n    def enviar_comando(self, porta, baud_rate, comando, log):\n        \"\"\"\n        M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.\n\n        Returns:\n            Send (Command): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        try:\n            with serial.Serial(porta, baud_rate, timeout=1) as ser:\n                if isinstance(comando, str):\n                    comando = comando.encode()\n                ser.write(comando)\n                log.append(f\"\u2705 Comando enviado (interno): {comando.decode().strip()}\")\n        except serial.SerialException as e:\n            log.append(f\"\u274c Erro ao enviar comando para a porta serial: {str(e)}\")\n        except Exception as e:\n            log.append(f\"\u274c Erro inesperado: {str(e)}\")\n\n    def exibir_resultado(self, raw_response, latencia, log) -&gt; None:\n        \"\"\"\n        Exibe o resultado das informa\u00e7\u00f5es do relay.\n\n        Returns:\n            Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        response_str = self.decodificar_resposta(raw_response, log)\n        abas = st.tabs([\"\ud83d\udcf1 Resposta\", \"\ud83d\udce6 Bytes Recebidos\", \"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\", \"\ud83e\uddea An\u00e1lise XOR\"])\n\n        with abas[0]:\n            st.subheader(\"\ud83d\udcf1 Resposta do Dispositivo\")\n            if response_str:\n                st.success(f\"\ud83d\udcf1 Resposta do dispositivo: {response_str}\")\n            else:\n                st.warning(\"\u26a0\ufe0f Dados n\u00e3o textuais recebidos.\")\n                st.code(raw_response.hex(), language=\"text\")\n\n            st.text(f\"\u23f1\ufe0f Tempo de resposta: {latencia:.2f} segundos\")\n\n            if response_str and \"OK\" in response_str.upper():\n                st.success(\"\ud83d\udd0d Firewall validado e relay seguro.\")\n            elif response_str:\n                st.warning(f\"\u2757 Resposta inesperada: '{response_str}' \u2014 verifique o firmware.\")\n            else:\n                st.error(\"\u274c Nenhuma resposta v\u00e1lida foi interpretada.\")\n\n        with abas[1]:\n            st.code(\" \".join(f\"{b:02x}\" for b in raw_response), language=\"text\")\n            byte_table = pd.DataFrame({\n                \"Byte (Hex)\": [f\"{b:02x}\" for b in raw_response],\n                \"Byte (Dec)\": [str(b) for b in raw_response],\n                \"ASCII\": [chr(b) if 32 &lt;= b &lt;= 126 else \".\" for b in raw_response]\n            })\n            with st.expander(\"\ud83d\udce6 Bytes Recebidos\"):\n                st.dataframe(byte_table)\n\n        with abas[2]:\n            st.subheader(\"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\")\n            st.code(\"\\n\".join(log), language=\"text\")\n\n        with abas[3]:\n            self.exibir_analise_xor(raw_response)\n\n    def decodificar_resposta(self, raw, log) -&gt; None:\n        \"\"\"\n        M\u00e9todo de descriptografia.\n\n        Returns:\n            Show (Descript): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        try:\n            response = raw.decode(\"utf-8\")\n            log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: UTF-8\")\n            return response\n        except UnicodeDecodeError:\n            try:\n                response = raw.decode(\"latin1\")\n                log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Latin-1\")\n                return response\n            except Exception:\n                try:\n                    base64_str = raw.decode(\"utf-8\", errors=\"ignore\")\n                    decoded = base64.b64decode(base64_str).decode(\"utf-8\", errors=\"replace\")\n                    log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Base64 (fallback)\")\n                    return decoded\n                except Exception as e:\n                    log.append(f\"\ud83d\udea8 Falha na decodifica\u00e7\u00e3o base64: {e}\")\n        return None\n\n    def exibir_analise_xor(self, raw_response) -&gt; None:\n        \"\"\"\n        Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.\n\n        Returns:\n            Show (Xor): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n        \"\"\"\n        st.subheader(\"\ud83e\uddea An\u00e1lise XOR Brute Force - Tabela Redimensional\")\n        palavras_chave = [\"OK\", \"FIREWALL\", \"ACCESS\", \"RESTART\", \"DENIED\", \"GRANTED\", \"SECURE\"]\n        tabela_xor = []\n\n        for key in range(1, 256):\n            xor_result = [b ^ key for b in raw_response]\n            decoded = ''.join(chr(b) if 32 &lt;= b &lt;= 126 else '.' for b in xor_result)\n\n            palavras_detectadas = [p for p in palavras_chave if p.upper() in decoded.upper()]\n            printable_chars = sum(1 for c in decoded if 32 &lt;= ord(c) &lt;= 126)\n            printable_ratio = printable_chars / len(decoded)\n\n            if printable_ratio &gt; 0.8 and palavras_detectadas:\n                tabela_xor.append({\n                    \"Key\": key,\n                    \"Printable Ratio\": printable_ratio,\n                    \"Qtd Palavras-chave\": len(palavras_detectadas),\n                    \"Palavra-chave Detectada\": \", \".join(palavras_detectadas),\n                    \"Texto Decodificado\": decoded\n                })\n\n        if tabela_xor:\n            df_xor = pd.DataFrame(tabela_xor).sort_values(by=[\"Qtd Palavras-chave\", \"Printable Ratio\"], ascending=False)\n\n            melhor_linha = df_xor.iloc[0]\n            st.markdown(\"### \ud83d\udd0d Insights\")\n            st.write(f\"**Chave Encontrada:** `{melhor_linha['Key']}`\")\n            st.write(f\"**Texto Decodificado:** `{melhor_linha['Texto Decodificado']}`\")\n            st.write(f\"**Palavras-chave Detectadas:** `{melhor_linha['Palavra-chave Detectada']}`\")\n            st.write(f\"**Printable Ratio:** `{melhor_linha['Printable Ratio']:.2f}`\")\n            st.write(f\"**Qtd Palavras-chave:** `{melhor_linha['Qtd Palavras-chave']}`\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.decodificar_resposta","title":"<code>decodificar_resposta(raw, log)</code>","text":"<p>M\u00e9todo de descriptografia.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Descript</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def decodificar_resposta(self, raw, log) -&gt; None:\n    \"\"\"\n    M\u00e9todo de descriptografia.\n\n    Returns:\n        Show (Descript): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    try:\n        response = raw.decode(\"utf-8\")\n        log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: UTF-8\")\n        return response\n    except UnicodeDecodeError:\n        try:\n            response = raw.decode(\"latin1\")\n            log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Latin-1\")\n            return response\n        except Exception:\n            try:\n                base64_str = raw.decode(\"utf-8\", errors=\"ignore\")\n                decoded = base64.b64decode(base64_str).decode(\"utf-8\", errors=\"replace\")\n                log.append(\"\ud83d\udd0d Decodifica\u00e7\u00e3o: Base64 (fallback)\")\n                return decoded\n            except Exception as e:\n                log.append(f\"\ud83d\udea8 Falha na decodifica\u00e7\u00e3o base64: {e}\")\n    return None\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.detectar_porta_serial","title":"<code>detectar_porta_serial()</code>","text":"<p>M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Port</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def detectar_porta_serial(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo de detec\u00e7\u00e3o da porta serial do aplicativo.\n\n    Returns:\n        Show (Port): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    portas = list(serial.tools.list_ports.comports())\n    for p in portas:\n        if any(chave in p.description for chave in [\"USB\", \"CH340\", \"CP210\"]):\n            return p.device\n    return None\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.enviar_comando","title":"<code>enviar_comando(porta, baud_rate, comando, log)</code>","text":"<p>M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.</p> <p>Returns:</p> Name Type Description <code>Send</code> <code>Command</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def enviar_comando(self, porta, baud_rate, comando, log):\n    \"\"\"\n    M\u00e9todo que executa a opera\u00e7\u00e3o de enviar comando.\n\n    Returns:\n        Send (Command): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    try:\n        with serial.Serial(porta, baud_rate, timeout=1) as ser:\n            if isinstance(comando, str):\n                comando = comando.encode()\n            ser.write(comando)\n            log.append(f\"\u2705 Comando enviado (interno): {comando.decode().strip()}\")\n    except serial.SerialException as e:\n        log.append(f\"\u274c Erro ao enviar comando para a porta serial: {str(e)}\")\n    except Exception as e:\n        log.append(f\"\u274c Erro inesperado: {str(e)}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_analise_xor","title":"<code>exibir_analise_xor(raw_response)</code>","text":"<p>Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Xor</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_analise_xor(self, raw_response) -&gt; None:\n    \"\"\"\n    Exibe as informa\u00e7\u00f5es do relay, com base em uma an\u00e1lise XOR.\n\n    Returns:\n        Show (Xor): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83e\uddea An\u00e1lise XOR Brute Force - Tabela Redimensional\")\n    palavras_chave = [\"OK\", \"FIREWALL\", \"ACCESS\", \"RESTART\", \"DENIED\", \"GRANTED\", \"SECURE\"]\n    tabela_xor = []\n\n    for key in range(1, 256):\n        xor_result = [b ^ key for b in raw_response]\n        decoded = ''.join(chr(b) if 32 &lt;= b &lt;= 126 else '.' for b in xor_result)\n\n        palavras_detectadas = [p for p in palavras_chave if p.upper() in decoded.upper()]\n        printable_chars = sum(1 for c in decoded if 32 &lt;= ord(c) &lt;= 126)\n        printable_ratio = printable_chars / len(decoded)\n\n        if printable_ratio &gt; 0.8 and palavras_detectadas:\n            tabela_xor.append({\n                \"Key\": key,\n                \"Printable Ratio\": printable_ratio,\n                \"Qtd Palavras-chave\": len(palavras_detectadas),\n                \"Palavra-chave Detectada\": \", \".join(palavras_detectadas),\n                \"Texto Decodificado\": decoded\n            })\n\n    if tabela_xor:\n        df_xor = pd.DataFrame(tabela_xor).sort_values(by=[\"Qtd Palavras-chave\", \"Printable Ratio\"], ascending=False)\n\n        melhor_linha = df_xor.iloc[0]\n        st.markdown(\"### \ud83d\udd0d Insights\")\n        st.write(f\"**Chave Encontrada:** `{melhor_linha['Key']}`\")\n        st.write(f\"**Texto Decodificado:** `{melhor_linha['Texto Decodificado']}`\")\n        st.write(f\"**Palavras-chave Detectadas:** `{melhor_linha['Palavra-chave Detectada']}`\")\n        st.write(f\"**Printable Ratio:** `{melhor_linha['Printable Ratio']:.2f}`\")\n        st.write(f\"**Qtd Palavras-chave:** `{melhor_linha['Qtd Palavras-chave']}`\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science","title":"<code>exibir_data_science()</code>","text":"<p>Exibe a lista de m\u00e9todos datascience no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de m\u00e9todos datascience no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    aba1, aba2, aba3 = st.tabs([\n        \"\ud83d\udcc8 Data Science: Regression Table - Info\",\n        \"\ud83d\udcc8 Data Science: Regression Table - Plot\",\n        \"\ud83d\udcca Data Science: S\u00e9ries Temporais\"\n    ])\n    with aba1:\n        self.exibir_data_science_resumo()\n    with aba2:\n        self.exibir_data_science_plot()\n    with aba3:\n        self.exibir_series_temporais()\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science_plot","title":"<code>exibir_data_science_plot()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Plot</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science_plot(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Plot): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Plot\")\n    try:\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        df = pd.DataFrame({\n            \"linguagens\": [linguagem + i for i in range(-5, 5)],\n            \"repositorios\": [repos + i for i in range(-5, 5)]\n        })\n        fig, ax = plt.subplots()\n        sns.regplot(x=\"linguagens\", y=\"repositorios\", data=df, ax=ax)\n        ax.set_title(\"Regress\u00e3o Linear: Linguagens vs Reposit\u00f3rios (Baseada no seu GitHub)\")\n        st.pyplot(fig)\n    except Exception as e:\n        st.error(f\"Erro ao exibir gr\u00e1fico de regress\u00e3o: {e}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_data_science_resumo","title":"<code>exibir_data_science_resumo()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Resumo</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_data_science_resumo(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Resumo): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc8 Data Science: Regression Table - Info\")\n    try:\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        df = pd.DataFrame({\n            \"linguagens\": [linguagem + i for i in range(-5, 5)],\n            \"repositorios\": [repos + i for i in range(-5, 5)]\n        })\n        X = df[\"linguagens\"]\n        y = df[\"repositorios\"]\n        X_const = sm.add_constant(X)\n        modelo = sm.OLS(y, X_const).fit()\n        st.write(\"**Resumo da Regress\u00e3o Linear com seus dados do GitHub:**\")\n        st.text(modelo.summary())\n    except Exception as e:\n        st.error(f\"Erro ao exibir regress\u00e3o: {e}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_lista_repositorios","title":"<code>exibir_lista_repositorios()</code>","text":"<p>Exibe a lista de reposit\u00f3rios detalhados no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_lista_repositorios(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios detalhados no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcc3 Lista Detalhada de Reposit\u00f3rios\")\n    repos_url = self.user_data.get(\"repos_url\")\n    if repos_url:\n        try:\n            repos = requests.get(repos_url).json()\n            df_repos = pd.DataFrame([{\n                \"Nome\": repo[\"name\"],\n                \"Descri\u00e7\u00e3o\": repo.get(\"description\", \"\"),\n                \"Estrelas\": repo[\"stargazers_count\"],\n                \"Forks\": repo[\"forks_count\"],\n                \"URL\": repo[\"html_url\"],\n                \"Linguagem\": repo.get(\"language\", \"N/A\"),\n                \"Atualizado em\": repo[\"updated_at\"]\n            } for repo in repos])\n            st.dataframe(df_repos)\n        except Exception as e:\n            st.error(f\"Erro ao carregar reposit\u00f3rios: {e}\")\n    else:\n        st.warning(\"URL de reposit\u00f3rios n\u00e3o encontrada.\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_perfil","title":"<code>exibir_perfil()</code>","text":"<p>Exibe o perfil do usu\u00e1rio do github.</p> <p>Returns:</p> Name Type Description <code>Exibir</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_perfil(self) -&gt; None:\n    \"\"\"\n    Exibe o perfil do usu\u00e1rio do github.\n\n    Returns:\n        Exibir (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.title(\"\ud83d\udc64 GitHub Dashboard\")\n    col1, col2 = st.columns([1, 3])\n    with col1:\n        st.image(self.user_data.get(\"avatar_url\"), width=120)\n    with col2:\n        st.subheader(self.user_data.get(\"name\") or self.user_data.get(\"login\"))\n        st.caption(f\"[\ud83d\udd17 {self.user_data.get('login')}]({self.user_data.get('html_url')})\")\n        if self.user_data.get(\"location\"):\n            st.text(f\"\ud83d\udccd {self.user_data['location']}\")\n        if self.user_data.get(\"email\"):\n            st.text(f\"\ud83d\udce7 {self.user_data['email']}\")\n        if self.user_data.get(\"bio\"):\n            st.markdown(f\"&gt; _{self.user_data['bio']}_\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_relay_firewall","title":"<code>exibir_relay_firewall()</code>","text":"<p>Exibe as informa\u00e7\u00f5es do relay.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Relay</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_relay_firewall(self) -&gt; None:\n    \"\"\"\n    Exibe as informa\u00e7\u00f5es do relay.\n\n    Returns:\n        Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    log = []\n\n    st.subheader(\"\ud83d\ude80 Ciberseguran\u00e7a: Relay e Firewall\")\n    status = st.empty()\n    reiniciar = st.button(\"\ud83d\udca1 Reiniciar Rel\u00e9\")\n\n    porta_serial = self.detectar_porta_serial() or \"COM4\"\n    baud_rate = 9600\n\n    try:\n        if reiniciar:\n            st.write(\"Reiniciando rel\u00e9...\")\n            log = [\"\u2705 Comando enviado: RESTART\"]\n            self.enviar_comando(porta_serial, baud_rate, b\"RESTART\\n\", log)\n            status.success(\"Rel\u00e9 Reiniciado com sucesso! \u2705\")\n\n        st.info(f\"\ud83d\udd0c Iniciando comunica\u00e7\u00e3o serial na porta `{porta_serial}`...\")\n        with serial.Serial(porta_serial, baud_rate, timeout=2) as ser:\n            time.sleep(2)\n            ser.write(b\"FIREWALL\\n\")\n            log = [\"\u2705 Comando enviado: FIREWALL\"]\n            start = time.time()\n            raw_response = ser.readline()\n            latencia = time.time() - start\n\n        if log:\n            self.exibir_resultado(raw_response, latencia, log)\n\n    except serial.SerialException as se:\n        st.error(f\"Erro de conex\u00e3o serial: {se}\")\n    except Exception as e:\n        st.error(f\"Erro inesperado: {e}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_repositorios","title":"<code>exibir_repositorios()</code>","text":"<p>Exibe a lista de reposit\u00f3rios no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_repositorios(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    aba1, aba2 = st.tabs([\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\", \"\ud83d\uddc3\ufe0f Lista Detalhada de Reposit\u00f3rios\"])\n    with aba1:\n        self.exibir_repositorios_publicos()\n    with aba2:\n        self.exibir_lista_repositorios()\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_repositorios_publicos","title":"<code>exibir_repositorios_publicos()</code>","text":"<p>Exibe a lista de reposit\u00f3rios publicos no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_repositorios_publicos(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de reposit\u00f3rios publicos no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\")\n    repos_url = self.user_data.get(\"repos_url\")\n    if repos_url:\n        response = requests.get(repos_url)\n        if response.status_code == 200:\n            repos = response.json()\n            if isinstance(repos, list):\n                for repo in repos[:100]:\n                    st.markdown(f\"\ud83d\udcd4\ufe0f [{repo['name']}]({repo['html_url']}) \u2014 \u2b50 {repo['stargazers_count']}\")\n            else:\n                st.warning(\"\\u26a0\\ufe0f Dados de reposit\u00f3rios inv\u00e1lidos recebidos da API.\")\n        else:\n            st.error(f\"\u274c Erro ao acessar reposit\u00f3rios: {response.status_code}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_resultado","title":"<code>exibir_resultado(raw_response, latencia, log)</code>","text":"<p>Exibe o resultado das informa\u00e7\u00f5es do relay.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Relay</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_resultado(self, raw_response, latencia, log) -&gt; None:\n    \"\"\"\n    Exibe o resultado das informa\u00e7\u00f5es do relay.\n\n    Returns:\n        Show (Relay): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    response_str = self.decodificar_resposta(raw_response, log)\n    abas = st.tabs([\"\ud83d\udcf1 Resposta\", \"\ud83d\udce6 Bytes Recebidos\", \"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\", \"\ud83e\uddea An\u00e1lise XOR\"])\n\n    with abas[0]:\n        st.subheader(\"\ud83d\udcf1 Resposta do Dispositivo\")\n        if response_str:\n            st.success(f\"\ud83d\udcf1 Resposta do dispositivo: {response_str}\")\n        else:\n            st.warning(\"\u26a0\ufe0f Dados n\u00e3o textuais recebidos.\")\n            st.code(raw_response.hex(), language=\"text\")\n\n        st.text(f\"\u23f1\ufe0f Tempo de resposta: {latencia:.2f} segundos\")\n\n        if response_str and \"OK\" in response_str.upper():\n            st.success(\"\ud83d\udd0d Firewall validado e relay seguro.\")\n        elif response_str:\n            st.warning(f\"\u2757 Resposta inesperada: '{response_str}' \u2014 verifique o firmware.\")\n        else:\n            st.error(\"\u274c Nenhuma resposta v\u00e1lida foi interpretada.\")\n\n    with abas[1]:\n        st.code(\" \".join(f\"{b:02x}\" for b in raw_response), language=\"text\")\n        byte_table = pd.DataFrame({\n            \"Byte (Hex)\": [f\"{b:02x}\" for b in raw_response],\n            \"Byte (Dec)\": [str(b) for b in raw_response],\n            \"ASCII\": [chr(b) if 32 &lt;= b &lt;= 126 else \".\" for b in raw_response]\n        })\n        with st.expander(\"\ud83d\udce6 Bytes Recebidos\"):\n            st.dataframe(byte_table)\n\n    with abas[2]:\n        st.subheader(\"\ud83e\uddfe Log de Decodifica\u00e7\u00e3o\")\n        st.code(\"\\n\".join(log), language=\"text\")\n\n    with abas[3]:\n        self.exibir_analise_xor(raw_response)\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.exibir_series_temporais","title":"<code>exibir_series_temporais()</code>","text":"<p>M\u00e9todo DataScience.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>Temporais</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def exibir_series_temporais(self) -&gt; None:\n    \"\"\"\n    M\u00e9todo DataScience.\n\n    Returns:\n        Show (Temporais): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.subheader(\"\ud83d\udcca An\u00e1lise de S\u00e9ries Temporais com seus dados do GitHub\")\n    try:\n        # Simula evolu\u00e7\u00e3o de reposit\u00f3rios com base no tempo\n        linguagem = self.user_data.get(\"language\", 0)\n        repos = self.user_data.get(\"public_repos\", 0)\n        datas = pd.date_range(end=pd.Timestamp.today(), periods=10)\n\n        df = pd.DataFrame({\n            \"data\": datas,\n            \"linguagens\": [linguagem + i for i in range(10)],\n            \"repositorios\": [repos + i + (i % 3 - 1) for i in range(10)]\n        }).set_index(\"data\")\n\n        # Gr\u00e1fico de linha simples\n        st.line_chart(df[[\"repositorios\"]])\n\n        # M\u00e9dia m\u00f3vel\n        df[\"media_movel\"] = df[\"repositorios\"].rolling(window=3).mean()\n        fig, ax = plt.subplots()\n        df[\"repositorios\"].plot(ax=ax, label=\"Reposit\u00f3rios\", marker=\"o\")\n        df[\"media_movel\"].plot(ax=ax, label=\"M\u00e9dia M\u00f3vel (3 dias)\", linestyle=\"--\")\n        ax.set_title(\"Reposit\u00f3rios GitHub - S\u00e9rie Temporal com M\u00e9dia M\u00f3vel\")\n        ax.legend()\n        st.pyplot(fig)\n\n    except Exception as e:\n        st.error(f\"Erro ao exibir s\u00e9ries temporais: {e}\")\n</code></pre>"},{"location":"modules/app_interface/#dashboard.github_dashboard.GitHubDashboard.show_dashboard","title":"<code>show_dashboard()</code>","text":"<p>Exibe a lista de funcionalidades no aplicative.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>dashboard\\github_dashboard.py</code> <pre><code>def show_dashboard(self) -&gt; None:\n    \"\"\"\n    Exibe a lista de funcionalidades no aplicative.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    tabs = st.tabs([\n        \"\ud83d\udc64 Perfil\",\n        \"\ud83d\udce6 Reposit\u00f3rios P\u00fablicos\",\n        \"\ud83d\uddc3\ufe0f Lista Detalhada\",\n        \"\ud83d\udcca Regress\u00e3o - Info\",\n        \"\ud83d\udcc9 Regress\u00e3o - Gr\u00e1fico\",\n        \"\ud83d\udee1\ufe0f Relay e Firewall\"\n    ])\n\n    with tabs[0]:\n        self.exibir_perfil()\n\n    with tabs[1]:\n        self.exibir_repositorios_publicos()\n\n    with tabs[2]:\n        self.exibir_lista_repositorios()\n\n    with tabs[3]:\n        self.exibir_data_science()\n\n    with tabs[4]:\n        self.exibir_data_science_plot()\n\n    with tabs[5]:\n        self.exibir_relay_firewall()\n</code></pre>"},{"location":"modules/blackops_interface/","title":"<code>blackops.ui.streamlit_interface</code>","text":""},{"location":"modules/blackops_interface/#blackops.ui.streamlit_interface.executar_funcao","title":"<code>executar_funcao(funcao)</code>","text":"<p>Executa a fun\u00e7\u00e3o associada a um bot\u00e3o da interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Funcao</code> <code>Optional[str]</code> <p>Nome da fun\u00e7\u00e3o a ser executada.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def executar_funcao(funcao: Optional[str]) -&gt; None:\n    \"\"\"\n    Executa a fun\u00e7\u00e3o associada a um bot\u00e3o da interface Streamlit.\n\n    Returns:\n        Funcao (Optional[str]): Nome da fun\u00e7\u00e3o a ser executada.\n    \"\"\"\n    if funcao == 'activate_relay':\n        activate_relay()\n        st.success(\"Relay ativado com sucesso!\")\n    elif funcao == 'scan_port':\n        portas = scan_ports()\n        st.code(f\"Portas abertas: {portas}\")\n    elif funcao == 'verify_firewall':\n        regras = check_firewall_rules()\n        st.code(\"\\n\".join(regras))\n    elif funcao == 'voice_command':\n        resultado = activate_voice_control()\n        st.success(resultado)\n        st.info(resultado)\n    elif funcao == 'stream_camera':\n        stream_camera()\n</code></pre>"},{"location":"modules/blackops_interface/#blackops.ui.streamlit_interface.load_config","title":"<code>load_config()</code>","text":"<p>Carrega o arquivo de configura\u00e7\u00e3o YAML.</p> <p>Returns:</p> Name Type Description <code>Load</code> <code>Dict[str, Any]</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def load_config() -&gt; Dict[str, Any]:\n    \"\"\"\n    Carrega o arquivo de configura\u00e7\u00e3o YAML.\n\n    Returns:\n        Load: Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    config_path = os.path.join(os.path.dirname(__file__), '..', 'config', 'settings.yaml')\n    with open(config_path, 'r') as file:\n        return yaml.safe_load(file)\n</code></pre>"},{"location":"modules/blackops_interface/#blackops.ui.streamlit_interface.show_comandos_disponiveis","title":"<code>show_comandos_disponiveis()</code>","text":"<p>Exibe a lista de comandos de voz dispon\u00edveis na interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Show</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def show_comandos_disponiveis() -&gt; None:\n    \"\"\"\n    Exibe a lista de comandos de voz dispon\u00edveis na interface Streamlit.\n\n    Returns:\n        Show (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n    st.markdown(\"---\")\n    st.markdown(\"### \ud83c\udf99\ufe0f Comandos de Voz Dispon\u00edveis\")\n    comandos = [\n        \"Qual o \u00faltimo commit do projeto?\",\n        \"Resuma o reposit\u00f3rio OpenAI Whisper.\",\n        \"Quantas issues est\u00e3o abertas?\",\n        \"Quais s\u00e3o as pull requests?\",\n        \"Em qual linguagem esse reposit\u00f3rio est\u00e1 programado?\"\n    ]\n    for comando in comandos:\n        st.markdown(f\"- `{comando}`\")\n</code></pre>"},{"location":"modules/blackops_interface/#blackops.ui.streamlit_interface.show_project_info","title":"<code>show_project_info()</code>","text":"<p>Exibe informa\u00e7\u00f5es do reposit\u00f3rio GitHub, comandos e a\u00e7\u00f5es interativas na interface Streamlit.</p> <p>Returns:</p> Name Type Description <code>Project</code> <code>None</code> <p>Configura\u00e7\u00f5es carregadas do arquivo YAML.</p> Source code in <code>blackops\\ui\\streamlit_interface.py</code> <pre><code>def show_project_info() -&gt; None:\n    \"\"\"\n    Exibe informa\u00e7\u00f5es do reposit\u00f3rio GitHub, comandos e a\u00e7\u00f5es interativas na interface Streamlit.\n\n    Returns:\n        Project (None): Configura\u00e7\u00f5es carregadas do arquivo YAML.\n    \"\"\"\n\n    col_status, col_comandos = st.columns(2)\n\n    config = load_config()\n    st_autorefresh(interval=60000, key=\"github_auto_refresh\")\n\n    with col_status:\n        st.markdown(\"---\")\n        st.header(\"\ud83d\udce1 Status do Reposit\u00f3rio GitHub\")\n\n        token = os.getenv(\"8928341d3b422e184b621364a45885f6a2baa804\")\n        repo_name = \"openai/whisper\"\n\n        repo_info = get_repo_info(repo_name, token)\n\n        if \"error\" in repo_info:\n            st.error(f\"Erro ao buscar dados do GitHub: {repo_info['error']}\")\n        else:\n            st.markdown(f\"**\ud83d\udd17 Reposit\u00f3rio:** `{repo_info['name']}`\")\n            st.markdown(f\"**\ud83d\udcdd Descri\u00e7\u00e3o:** {repo_info['description']}`\")\n            st.markdown(f\"**\ud83d\udce6 Linguagem Principal:** `{repo_info['language']}`\")\n            st.markdown(f\"**\u2b50 Estrelas:** `{repo_info['stars']}`\")\n            st.markdown(f\"**\ud83d\udc1e Issues Abertas:** `{repo_info['open_issues']}`\")\n            st.markdown(f\"**\ud83d\udd52 \u00daltimo Commit:** `{repo_info['last_commit']}`\")\n\n    with col_comandos:\n        show_comandos_disponiveis()\n\n    st.markdown(\"---\")\n    st.header(\"\u2699\ufe0f Comandos de Controle\")\n\n    col1, col2, col3, col4, col5 = st.columns(5)\n    funcao: Optional[str] = None\n\n    with col1:\n        if st.button(\"Ativar Relay \ud83d\udd0c\"):\n            funcao = 'activate_relay'\n    with col2:\n        if st.button(\"Scan de Portas \ud83c\udf10\"):\n            funcao = 'scan_port'\n    with col3:\n        if st.button(\"Verificar Firewall \ud83d\udd25\"):\n            funcao = 'verify_firewall'\n    with col4:\n        if st.button(\"Comando de Voz \ud83c\udf99\ufe0f\"):\n            funcao = 'voice_command'\n    with col5:\n        if st.button(\"\ud83d\udce1 Iniciar Live da C\u00e2mera\"):\n            funcao = 'stream_camera'\n\n    executar_funcao(funcao)\n\n    st.markdown(\"---\")\n    st.markdown(\"\u2705 M\u00f3dulos Ativos:\")\n    st.markdown(\"- \ud83d\udd0c Controle de Relay (GPIO)\")\n    st.markdown(\"- \ud83c\udf10 Verificador de Firewall e Portas\")\n    st.markdown(\"- \ud83c\udf99\ufe0f Reconhecimento de voz\")\n    st.markdown(\"- \ud83d\udcf7 OCR e Transmiss\u00e3o de v\u00eddeo\")\n    st.markdown(\"- \ud83e\udde0 M\u00f3dulos de IA e F\u00edsica\")\n    st.markdown(\"- \ud83d\udcca Interface Streamlit\")\n\n    st.success(\"Sistema pronto para opera\u00e7\u00e3o t\u00e1tica.\")\n</code></pre>"}]}